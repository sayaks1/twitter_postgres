name: tests_denormalized
on:
  push:
    branches: ['*']
  pull_request:
    branches: ['*']
jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: setup python
      run: |
        pip3 install -r requirements.txt
    - name: Init submodules and start Docker containers
      run: |
        git submodule init
        git submodule update
        docker compose down -v
        docker volume ls -q --filter name=pg_normalized | xargs -r docker volume rm
        docker volume ls -q --filter name=pg_denormalized | xargs -r docker volume rm
        docker compose up -d --build
        docker ps -a

    - name: Wait for container DNS resolution and database initialization
      run: |
        echo "Waiting for databases to initialize (30 seconds)..."
        sleep 30
        echo "Checking if databases are ready..."
        docker compose exec -T pg_normalized pg_isready -U postgres
        docker compose exec -T pg_denormalized pg_isready -U postgres

    - name: Run load_tweets.sh
      run: |
        sh load_tweets.sh
      env:
        CI: "true"
    - name: Debug database status after load
      run: |
        PGPASSWORD=pass psql -h localhost -p 1048 -U postgres -d pg_normalized -c "SELECT count(*) FROM tweets;"
        PGPASSWORD=pass psql -h localhost -p 1048 -U postgres -d pg_normalized -c "SELECT count(*) FROM tweet_tags;"
        PGPASSWORD=pass psql -h localhost -p 1047 -U postgres -d pg_denormalized -c "SELECT count(*) FROM tweets_jsonb;"
        PGPASSWORD=pass psql -h localhost -p 1047 -U postgres -d pg_denormalized -c "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';"
        PGPASSWORD=pass psql -h localhost -p 1047 -U postgres -d pg_denormalized -c "SELECT table_name FROM information_schema.views WHERE table_schema = 'public';"

    - name: Run tests inside pg_denormalized
      run: |
        docker compose exec -e CI=true -T pg_denormalized bash -c "sh /tmp/db/run_tests.sh"
